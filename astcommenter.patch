### Eclipse Workspace Patch 1.0
#P org.eclipse.cdt.core
Index: parser/org/eclipse/cdt/core/dom/rewrite/ASTRewrite.java
===================================================================
RCS file: /cvsroot/tools/org.eclipse.cdt/all/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/rewrite/ASTRewrite.java,v
retrieving revision 1.3
diff -u -r1.3 ASTRewrite.java
--- parser/org/eclipse/cdt/core/dom/rewrite/ASTRewrite.java	4 Feb 2009 09:44:08 -0000	1.3
+++ parser/org/eclipse/cdt/core/dom/rewrite/ASTRewrite.java	30 Nov 2010 16:07:53 -0000
@@ -20,6 +20,7 @@
 import org.eclipse.cdt.internal.core.dom.rewrite.ASTModificationStore;
 import org.eclipse.cdt.internal.core.dom.rewrite.ASTRewriteAnalyzer;
 import org.eclipse.cdt.internal.core.dom.rewrite.ASTModification.ModificationKind;
+import org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.CommentRemapping;
 import org.eclipse.ltk.core.refactoring.Change;
 import org.eclipse.text.edits.TextEditGroup;
 
@@ -55,6 +56,7 @@
 	private final IASTNode fRoot;
 	private final ASTModificationStore fModificationStore;
 	private final ASTModification fParentMod;
+	private CommentRemapping mappedComments;
 
 	private ASTRewrite(IASTNode root, ASTModificationStore modStore, ASTModification parentMod) {
 		fRoot= root;
@@ -175,9 +177,43 @@
 		if (!(fRoot instanceof IASTTranslationUnit)) {
 			throw new IllegalArgumentException("This API can only be used for the root rewrite object."); //$NON-NLS-1$
 		}
+		if (mappedComments != null)
+			return ASTRewriteAnalyzer.rewriteAST((IASTTranslationUnit) fRoot, fModificationStore, mappedComments);
 		return ASTRewriteAnalyzer.rewriteAST((IASTTranslationUnit) fRoot, fModificationStore);
 	}
 
+	/**
+	 * Add a node comment mapping to this rewriter that helps moving comments from an old, to be
+	 * removed/replaced node over to an other, possibly newly created node. The mappings will be applied while
+	 * rewriting the AST.
+	 * 
+	 * @param fromNode copy comments around this node...
+	 * @param toNode ... and insert them when writing this node
+	 */
+	public void addCommentMapping(IASTNode fromNode, IASTNode toNode) {
+		if (mappedComments == null)
+			mappedComments = new CommentRemapping();
+		mappedComments.addCommentMapping(fromNode, toNode);
+	}
+
+	/**
+	 * Uses addCommentMapping to map every comment contained in the fromNode to the toNode and its children.
+	 * 
+	 * @param fromNode copy every comment around and inside this node...
+	 * @param toNode ... and insert them into this new node and its children. This new node is intended to 
+	 * have a similar structure as the fromNode since comments will be mapped child-wise. Comments that 
+	 * can't be matched to a child of the toNode will be skipped.
+	 */
+	public void addRecursiveCommentMapping(IASTNode fromNode, IASTNode toNode) {
+		if (fromNode == null || toNode == null)
+			throw new IllegalArgumentException();
+		addCommentMapping(fromNode, toNode);
+		IASTNode[] oldChildren = fromNode.getChildren();
+		IASTNode[] newChildren = toNode.getChildren();
+		for (int i = 0; i < oldChildren.length && i < newChildren.length; i++)
+			addRecursiveCommentMapping(oldChildren[i], newChildren[i]);
+	}
+	
 	private void checkBelongsToAST(IASTNode node) {
 		while (node != null) {
 			node= node.getParent();
Index: parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java
===================================================================
RCS file: /cvsroot/tools/org.eclipse.cdt/all/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java,v
retrieving revision 1.3
diff -u -r1.3 ASTRewriteAnalyzer.java
--- parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java	12 Mar 2008 09:53:14 -0000	1.3
+++ parser/org/eclipse/cdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java	30 Nov 2010 16:07:53 -0000
@@ -12,6 +12,7 @@
 
 import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
 import org.eclipse.cdt.internal.core.dom.rewrite.changegenerator.ChangeGenerator;
+import org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.CommentRemapping;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.ltk.core.refactoring.Change;
 import org.eclipse.ltk.core.refactoring.TextFileChange;
@@ -24,6 +25,13 @@
 		rewriter.generateChange(root);
 		return rewriter.getChange();
 	}
+	
+	public static Change rewriteAST(IASTTranslationUnit root, ASTModificationStore modificationStore,
+			CommentRemapping map) {
+		ChangeGenerator rewriter = new ChangeGenerator(modificationStore);
+		rewriter.generateChange(root, rewriter, map);
+		return rewriter.getChange();
+	}
 
 	public static void setCTextFileChangeFactory(ICTextFileChangeFactory factory) {
 		sFileChangeFactory= factory;
Index: parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGenerator.java
===================================================================
RCS file: /cvsroot/tools/org.eclipse.cdt/all/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGenerator.java,v
retrieving revision 1.18
diff -u -r1.18 ChangeGenerator.java
--- parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGenerator.java	3 Jun 2010 17:52:53 -0000	1.18
+++ parser/org/eclipse/cdt/internal/core/dom/rewrite/changegenerator/ChangeGenerator.java	30 Nov 2010 16:07:53 -0000
@@ -39,6 +39,7 @@
 import org.eclipse.cdt.internal.core.dom.rewrite.astwriter.ASTWriter;
 import org.eclipse.cdt.internal.core.dom.rewrite.astwriter.ProblemRuntimeException;
 import org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.ASTCommenter;
+import org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.CommentRemapping;
 import org.eclipse.cdt.internal.core.dom.rewrite.commenthandler.NodeCommentMap;
 import org.eclipse.cdt.internal.core.dom.rewrite.util.FileContentHelper;
 import org.eclipse.cdt.internal.core.dom.rewrite.util.FileHelper;
@@ -107,12 +108,18 @@
 
 	public void generateChange(IASTNode rootNode, CPPASTVisitor pathProvider)
 			throws ProblemRuntimeException {
+		generateChange(rootNode, pathProvider, null);
+	}
+
+	public void generateChange(IASTNode rootNode, CPPASTVisitor pathProvider, CommentRemapping map) throws ProblemRuntimeException {
 		change = new CompositeChange(Messages.ChangeGenerator_compositeChange);
 		initParentModList();
-		commentMap = ASTCommenter.getCommentedNodeMap(rootNode.getTranslationUnit());
+		if (map == null)
+			commentMap = ASTCommenter.getCommentedNodeMap(rootNode.getTranslationUnit());
+		else
+			commentMap = ASTCommenter.getCommentedNodeMap(rootNode.getTranslationUnit(), map);
 		rootNode.accept(pathProvider);
 		for (IFile currentFile : changes.keySet()) {
-
 			TextFileChange subchange= ASTRewriteAnalyzer.createCTextFileChange(currentFile);
 			subchange.setEdit(changes.get(currentFile));
 			change.add(subchange);
Index: parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenter.java
===================================================================
RCS file: /cvsroot/tools/org.eclipse.cdt/all/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenter.java,v
retrieving revision 1.9
diff -u -r1.9 ASTCommenter.java
--- parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenter.java	29 Jul 2009 08:46:30 -0000	1.9
+++ parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/ASTCommenter.java	30 Nov 2010 16:07:53 -0000
@@ -21,6 +21,7 @@
 import org.eclipse.cdt.core.dom.ast.IASTDeclSpecifier;
 import org.eclipse.cdt.core.dom.ast.IASTDeclaration;
 import org.eclipse.cdt.core.dom.ast.IASTDeclarator;
+import org.eclipse.cdt.core.dom.ast.IASTEnumerationSpecifier.IASTEnumerator;
 import org.eclipse.cdt.core.dom.ast.IASTExpression;
 import org.eclipse.cdt.core.dom.ast.IASTInitializer;
 import org.eclipse.cdt.core.dom.ast.IASTName;
@@ -31,11 +32,10 @@
 import org.eclipse.cdt.core.dom.ast.IASTStatement;
 import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
 import org.eclipse.cdt.core.dom.ast.IASTTypeId;
-import org.eclipse.cdt.core.dom.ast.IASTEnumerationSpecifier.IASTEnumerator;
 import org.eclipse.cdt.core.dom.ast.cpp.CPPASTVisitor;
+import org.eclipse.cdt.core.dom.ast.cpp.ICPPASTCompositeTypeSpecifier.ICPPASTBaseSpecifier;
 import org.eclipse.cdt.core.dom.ast.cpp.ICPPASTNamespaceDefinition;
 import org.eclipse.cdt.core.dom.ast.cpp.ICPPASTTemplateParameter;
-import org.eclipse.cdt.core.dom.ast.cpp.ICPPASTCompositeTypeSpecifier.ICPPASTBaseSpecifier;
 import org.eclipse.cdt.internal.core.dom.parser.ASTNode;
 import org.eclipse.cdt.internal.core.dom.rewrite.util.OffsetHelper;
 import org.eclipse.core.resources.IProject;
@@ -55,7 +55,7 @@
  * @author Guido Zgraggen IFS 
  */
 public class ASTCommenter {
-	
+
 	private static final class PPRangeChecker extends CPPASTVisitor {
 		
 		int ppOffset;
@@ -177,14 +177,26 @@
 		if(transUnit== null) {
 			return new NodeCommentMap();
 		}
-		ArrayList<IASTComment> comments = removeNotNeededComments(transUnit);		
-		if(comments == null || comments.size() == 0) {
+		ArrayList<IASTComment> comments = removeNotNeededComments(transUnit);
+		if (comments == null || comments.size() == 0) {
 			return new NodeCommentMap();
 		}
 		return addCommentsToCommentMap(transUnit, comments);
 	}
 
-	private static ArrayList<IASTComment> removeNotNeededComments(IASTTranslationUnit transUnit) {
+	/**
+	 * Get the comment map of the given translation unit and add all comments that should be copied from old
+	 * nodes.
+	 * 
+	 * @param transUnit get comments of this translation unit
+	 * @param map defines which old node's comments will be copied to which new node.
+	 * @return the given map, flavored with the newly mapped comments
+	 */
+	public static NodeCommentMap getCommentedNodeMap(IASTTranslationUnit transUnit, CommentRemapping map){
+		return map.remapComments(getCommentedNodeMap(transUnit));
+	}
+
+	public static ArrayList<IASTComment> removeNotNeededComments(IASTTranslationUnit transUnit) {
 		ArrayList<IASTComment> comments = getCommentsInWorkspace(transUnit);
 		if (comments == null || comments.size() == 0) {
 			return null;
@@ -289,7 +301,7 @@
 	}
 
 	
-	private static NodeCommentMap addCommentsToCommentMap(IASTTranslationUnit rootNode,	ArrayList<IASTComment> comments){
+	public static NodeCommentMap addCommentsToCommentMap(IASTTranslationUnit rootNode,	ArrayList<IASTComment> comments){
 		NodeCommentMap commentMap = new NodeCommentMap();
 		CommentHandler commHandler = new CommentHandler(comments);
 
Index: parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/CommentRemapping.java
===================================================================
RCS file: parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/CommentRemapping.java
diff -N parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/CommentRemapping.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ parser/org/eclipse/cdt/internal/core/dom/rewrite/commenthandler/CommentRemapping.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,80 @@
+package org.eclipse.cdt.internal.core.dom.rewrite.commenthandler;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.eclipse.cdt.core.dom.ast.IASTComment;
+import org.eclipse.cdt.core.dom.ast.IASTNode;
+
+/**
+ * Remembers which node's comments should be applied to which (newly inserted) node.
+ */
+public class CommentRemapping {
+	private Map<IASTNode, IASTNode> manualCommentMapping;
+	
+	public CommentRemapping() {
+		 manualCommentMapping = new HashMap<IASTNode, IASTNode>();
+	}
+	
+	/**
+	 * Allows to map comments of a removed node to a new node. The mapping has to be done before using the
+	 * rewriter. Won't be applied recursively.
+	 * 
+	 * @param oldNode comments will be removed from this node...
+	 * @param newNode ... and attached to this node. This may be a synthetic node.
+	 */
+	public void addCommentMapping(IASTNode oldNode, IASTNode newNode) {
+		manualCommentMapping.put(oldNode, newNode);
+	}
+
+	/**
+	 * Adds the collected comments to an existing NodeCommentMap.
+	 *  
+	 * @param existingMap the old NodeCommentMap to which new comments will be appended
+	 * @return the modified NodeCommentMap that includes the newly inserted comments
+	 */
+	public NodeCommentMap remapComments(NodeCommentMap existingMap) {
+		for (Entry<IASTNode, IASTNode> entry : manualCommentMapping.entrySet()) {
+			IASTNode oldNode = entry.getKey();
+			IASTNode newNode = entry.getValue();
+
+			if (newNode.getTranslationUnit() == null)
+				continue;
+
+			remapCommentsOfNode(existingMap, oldNode, newNode);
+		}
+		return existingMap;
+	}
+
+	private void remapCommentsOfNode(NodeCommentMap existingMap, IASTNode oldNode, IASTNode newNode) {
+		NodeCommentMap lookHere = getCommentMapOfOldNode(existingMap, oldNode, newNode);
+
+		copyComments(oldNode, newNode, lookHere.leadingMap, existingMap.leadingMap);
+		copyComments(oldNode, newNode, lookHere.freestandingMap, existingMap.freestandingMap);
+		copyComments(oldNode, newNode, lookHere.trailingMap, existingMap.trailingMap);
+	}
+
+	private NodeCommentMap getCommentMapOfOldNode(NodeCommentMap existingMap, IASTNode oldNode, IASTNode newNode) {
+		if (newNode.getTranslationUnit().equals(oldNode.getTranslationUnit()))
+			return existingMap;
+		ArrayList<IASTComment> comments = ASTCommenter.removeNotNeededComments(oldNode.getTranslationUnit());
+		if (comments != null && comments.size() > 0)
+			return ASTCommenter.addCommentsToCommentMap(oldNode.getTranslationUnit(), comments);
+		return existingMap;
+	}
+
+	private void copyComments(IASTNode oldNode, IASTNode newNode,
+			HashMap<IASTNode, ArrayList<IASTComment>> resultingMap,
+			HashMap<IASTNode, ArrayList<IASTComment>> existingMap) {
+		if (resultingMap.get(oldNode) != null) {
+			ArrayList<IASTComment> oldComments = resultingMap.remove(oldNode);
+			ArrayList<IASTComment> newNodeMap = existingMap.get(newNode);
+			if (newNodeMap == null)
+				existingMap.put(newNode, oldComments);
+			else
+				newNodeMap.addAll(oldComments);
+		}
+	}
+}
\ No newline at end of file
#P org.eclipse.cdt.ui
Index: src/org/eclipse/cdt/internal/ui/refactoring/ModificationCollector.java
===================================================================
RCS file: /cvsroot/tools/org.eclipse.cdt/all/org.eclipse.cdt.ui/src/org/eclipse/cdt/internal/ui/refactoring/ModificationCollector.java,v
retrieving revision 1.4
diff -u -r1.4 ModificationCollector.java
--- src/org/eclipse/cdt/internal/ui/refactoring/ModificationCollector.java	3 Sep 2009 09:09:01 -0000	1.4
+++ src/org/eclipse/cdt/internal/ui/refactoring/ModificationCollector.java	30 Nov 2010 16:07:56 -0000
@@ -19,6 +19,7 @@
 
 import org.eclipse.ltk.core.refactoring.Change;
 
+import org.eclipse.cdt.core.dom.ast.IASTNode;
 import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;
 import org.eclipse.cdt.core.dom.rewrite.ASTRewrite;
 
@@ -50,7 +51,14 @@
 		}
 		changes.add(change);
 	}
-	
+
+	public void addCommentRemapping(IASTTranslationUnit unit, IASTNode oldNode, IASTNode newNode) {
+		ASTRewrite rewriter = rewriters.get(unit);
+		if (rewriter == null)
+			throw new IllegalArgumentException("no rewriter found for the given translation unit."); //$NON-NLS-1$
+		rewriter.addCommentMapping(oldNode, newNode);
+	}
+
 	public CCompositeChange createFinalChange() {
 		// Synthetic changes aren't displayed and therefore don't need a name
 		CCompositeChange result = new CCompositeChange(""); //$NON-NLS-1$

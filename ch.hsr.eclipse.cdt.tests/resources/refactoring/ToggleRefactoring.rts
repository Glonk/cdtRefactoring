//!TestSimpleFunctionInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	int /*$*/function()/*$$*/
	{
		return 0;
	}
};
//=
#include <iostream>

class A {
	int function();
};

inline int A::function()
{
    return 0;
}


//!TestSimpleFunctionInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	int function();
};

inline int /*$*/A::function()/*$$*/
{
	return 0;
}
//=
#include <iostream>

class A {
	int function();
};


//@A.cpp
#include "A.h"

int main() {
	return 0;
}

//=
#include "A.h"

int main() {
	return 0;
}

int A::function()
{
	return 0;
}


//!TestConstructorToggleInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    /*$*/A/*$$*/(int x, int y)
    :a(x), b(y)
    {}
};
//=
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
};

inline A::A(int x, int y)
:a(x), b(y)
{
}


//!TestConstructorToggleInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
};

inline A::/*$*/A/*$$*/(int x, int y)
:a(x), b(y)
{
}
//=
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
    
};


//@A.cpp
#include "A.h"

int main() {
	return 0;
}


//=
#include "A.h"

int main() {
	return 0;
}

A::A(int x, int y)
:a(x), b(y)
{
}


//!TestNestedClassInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	class B {
		void /*$*/member/*$$*/(int a, int b) {
			return;
		}
	};
};
//=
#include <iostream>

class A {
	class B {
		void member(int a, int b);
	};
};

inline void A::B::member(int a, int b)
{
    return;
}


//!TestNestedClassInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	class B {
		void member(int a, int b);
	};
};

inline void A::B::/*$*/member/*$$*/(int a, int b)
{
    return;
}
//=
#include <iostream>

class A {
	class B {
		void member(int a, int b);
	};
};


//@A.cpp
#include "A.h"

int main()
{
	return 0;
}


//=
#include "A.h"

int main()
{
	return 0;
}

void A::B::member(int a, int b)
{
	return;
}


//!TestDefaultParameterInitializerInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	void /*$*/member/*$$*/(int a=0, int b=0)
	{
		return;
	}
};
//=
#include <iostream>

class A {
	void member(int a=0, int b=0);
};

inline void A::member(int a, int b)
{
    return;
}


//!TestDefaultParameterInitializerInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
	void member(int a=0, int b=0);
};

inline void /*$*/A::member/*$$*/(int a, int b)
{
	return;
}
//=
#include <iostream>

class A {
	void member(int a=0, int b=0);

};


//@A.cpp
#include "A.h"

int main() {
	return 0;
}


//=
#include "A.h"

int main() {
	return 0;
}

void A::member(int a, int b)
{
	return;
}


//!TestTryCatchFromInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

class A {
	void /*$*/member/*$$*/(int a, int b)
	try 
	{
		return;
	} catch (std::exception e1) 
	{
		return;
	}
};
//=
#include <iostream>
#include <exception>

class A {
	void member(int a, int b);
};

inline void A::member(int a, int b)
try
{
    return;
}
catch(std::exception e1){
    return;
}


//!TestTryCatchFromInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

class A {
	void member(int a, int b);
};

inline void /*$*/A::member/*$$*/(int a, int b)
try
{
    return;
}
catch(std::exception e1){
    return;
}
//=
#include <iostream>
#include <exception>

class A {
	void member(int a, int b);
};


//@A.cpp
#include "A.h"

int main() {
	return 0;
}


//=
#include "A.h"

int main() {
	return 0;
}

void A::member(int a, int b)
try
{
	return;
}
catch(std::exception e1){
	return;
}


//!TestMultipleTryCatchFromInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

class A {
    void /*$*/member/*$$*/(int a, int b)
    try 
    {
        return;
    } catch (std::exception e1) 
    {
        return;
    } catch (std::exception e2)
    {
        return;
    }
};
//=
#include <iostream>
#include <exception>

class A {
    void member(int a, int b);
};

inline void A::member(int a, int b)
try
{
    return;
}
catch(std::exception e1){
    return;
}
catch(std::exception e2){
    return;
}


//!TestMultipleTryCatchFromInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

class A {
    void member(int a, int b);
};

inline void /*$*/A::member/*$$*/(int a, int b)
try
{
    return;
}
catch(std::exception e1){
    return;
}
catch(std::exception e2){
    return;
}
//=
#include <iostream>
#include <exception>

class A {
    void member(int a, int b);
    
};


//@A.cpp
#include "A.h"

int main() {
	return 0;
}


//=
#include "A.h"

int main() {
	return 0;
}

void A::member(int a, int b)
try
{
	return;
}
catch(std::exception e1){
	return;
}
catch(std::exception e2){
	return;
}


//!TestSimpleNamespaceInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

namespace N {
    class A {
        void /*$*/foo()/*$$*/ {
            return;
        }
    };
}
//=
#include <iostream>
#include <exception>

namespace N {
    class A {
        void foo();
    };
}

inline void N::A::foo()
{
    return;
}


//!TestSimpleNamespaceInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>
#include <exception>

namespace N {
    class A {
        void foo();
    };
}

inline void /*$*/N::A::foo/*$$*/()
{
    return;
}
//=
#include <iostream>
#include <exception>

namespace N {
    class A {
        void foo();

    };
}


//@A.cpp
#include "A.h"

int main() {
	return 0;
}


//=
#include "A.h"

int main() {
	return 0;
}

void N::A::foo()
{
	return;
}


//!TestTemplateFunctionInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

template <typename T>
class A {
  class B {
    T /*$*/member/*$$*/()
    {
    	return T();
    }
  };
};
//=
#include <iostream>

template <typename T>
class A {
  class B {
    T member();
  };
};

template<typename T> inline T A<T>::B::member()
{
    return T();
}


//!TestTemplateFunctionInHeaderTOInClass
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

template <typename T>
class A {
  class B {
    T member()
    {
    	return T();
    }
  };
  
};
template<typename T> inline T A<T>::B::/*$*/member/*$$*/()
{
    return T();
}
//=
#include <iostream>

template <typename T>
class A {
  class B {
    T member()
    {
    	return T();
    }
  };
  
};


//!TestConstructorToggleInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    /*$*/A/*$$*/(int x, int y)
    :a(x), b(y)
    {}
};
//=
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
};

inline A::A(int x, int y)
:a(x), b(y)
{
}


//!TestDestructorToggleInClassToInHeader
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    /*$*/~A/*$$*/()
    {}
};
//=
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    ~A();
};

inline A::~A()
{
}


//!TestConstructorToggleInHeaderToImplementation
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
};

inline A::/*$*/A/*$$*/(int x, int y)
:a(x), b(y)
{
}
//=
#include <iostream>

class A {
private:
    int a;
    int b;
public:
    A(int x, int y);
};


//@A.cpp
#include "A.h"

int main() {
    return 0;
}
//=
#include "A.h"

int main() {
    return 0;
}

A::A(int x, int y)
:a(x), b(y)
{
}


//!TestCandDTorNoInterfeeringWithEmptyArgumentList
//#ch.hsr.eclipse.cdt.ui.tests.toggle.ToggleRefactoringTest
//@.config
filename=A.h
//@A.h
#include <iostream>

class A {
    /*$*/A/*$$*/()
    {
    }
    ~A()
    {
    }
};
//=
#include <iostream>

class A {
    ~A()
    {
    }

    A();
};

inline A::A()
{
}


